---
AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function with dynamodb table.
Parameters:
  LambdaCodeBucket:
    Type: String
    Description: The name of the S3 bucket
  LambdaCodeObjectKey:
    Type: String
    Description: The key of the S3 object containing the lambda code
Resources:
  # DynamoDB Table
  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "MyTable"
      AttributeDefinitions:
        - AttributeName: "partition"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "partition"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      Policies:
        - PolicyName: "dynamodb-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                Resource: !GetAtt ["DynamoDBTable", "Arn"]
  # Lambda Function
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref "LambdaCodeBucket"
        S3Key: !Ref "LambdaCodeObjectKey"
      Handler: "function.handler"
      Role: !GetAtt ["LambdaExecutionRole", "Arn"]
      Runtime: "provided.al2"
      Environment:
        Variables:
          CUSTOM_DOMAIN: "example.com"
          DYNAMODB_TABLE: !Ref "DynamoDBTable"